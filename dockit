#!/bin/bash
# dockit: utility to make containers for normal development easy
# This is an early prototype

# stop on any uncaught error
set -e

check_debug() {
    if [ -n "${DOCKIT_DEBUG}" ]; then
        set -x
    fi
}

check_debug

MOUNTDIR=/prj
SCRIPT_NAME=$(basename $0)
SCRIPT_FULL_PATH=$(readlink -f $0)
SCRIPT_DIR=$(dirname $SCRIPT_FULL_PATH)

source $SCRIPT_DIR/common.sh

top_level() {
    get_common_options "$@"
    shift $SHIFT_COUNT

    export DISTRO
    export PRJ_SCRIPT
    add_local_gitignore
    #find_container
    #find_config
    mktemp
    docker run -it --rm \
        -v "${PWD}:${MOUNTDIR}" $DISTRO \
        ${MOUNTDIR}/$TMPDIR/$SCRIPT_NAME \
        --std-flow "$@"
}

mktemp() {
    local DISTRO_NAME=${DISTRO//:/-}     # replace colons with dash

    TMPDIR=.prjinfo/local/${SCRIPT_NAME}-${DISTRO_NAME}
    mkdir -p $TMPDIR
    TMPFILE=$TMPDIR/vars

    echo export MY_USER=$(whoami)            >$TMPFILE
    echo export MY_UID=$(id -u)             >>$TMPFILE
    echo export MY_GID=$(id -g)             >>$TMPFILE
    echo export OPT_SUDO=$OPT_SUDO          >>$TMPFILE
    echo export PRJ_SCRIPT=${PRJ_SCRIPT}    >>$TMPFILE

    TMP1=$(cd . ; dirs +0)  # get project name with ~ for HOME
    TMP1=${TMP1//\~/H}       # replace tidle with 'H'
    TMP1=${TMP1//\//_}      # replace all slashes with underscores
    CONTAINER_NAME=prj_${TMP1}__${DISTRO_NAME}
    echo $CONTAINER_NAME                    >$TMPDIR/name

    cp $SCRIPT_FULL_PATH $SCRIPT_DIR/common.sh $TMPDIR
}

std_flow() {
    CTRL_DIR=$(cd "$(dirname $0)"; pwd)
    PRJ_DIR=$(cd $CTRL_DIR/../../..; pwd)

    cd ${PRJ_DIR}

    # read vars from TEMPFILE
    source $CTRL_DIR/vars

    # do common admin setup of the container
    setup_distro

    if [ -f "./${PRJ_SCRIPT}" ]; then
        # now execute the command the user specified (or project specific setup)
        ./${PRJ_SCRIPT} admin_setup

        # project specific setup in user context
        su $MY_USER ./${PRJ_SCRIPT} prj_setup

        # project specific build/run, again in user context
        su $MY_USER ./${PRJ_SCRIPT} prj_build
    else
        sudo -iu $MY_USER
    fi
    exit
}

help() {
    echo "usage: dockit [dockit options] <command> [command options]"
    echo "command is one of:"
    echo "build     do the default build command in the container"
    echo "shell     get a shell in the container"
    echo "cmd       do an arbitrary command in the container"
    echo "icmd      do an arbitrary interactive command in the container"
    echo "purge     delete all containers for this project"
    echo ""
    echo "dockit options:"
    echo "--branch          remote/branch"
    echo "                  specify the remote and branch to build"
    echo "                  default ./WORKTREE"
    echo "--distro name     specify the distro"
    echo "--script path     specify the project specific setup script"
    echo "--rebuild         rebuild the container"
    echo "--generic         don't personalize to the user"
    echo "--isolate         don't mount project dir in container"
    echo "--read-only       mount project dir in container as read-only"
    echo "--top-dir dir     specify the top project dir"
    echo "--mount           specify the mount point in the container of the"
    echo "                  top project dir. Can be absolute or relative"
    echo "                  to user's $HOME"
    echo "--temp            delete the container after it has finished"
    echo "--temp-ok         delete the container if the return code is ok"
    echo "--mr-clean        --rebuild --generic --isolate"
    echo ""
    echo "options for purge"
    echo "--older-than N    delete all containers that have not run in N days"
    echo "--global          look at all dockit created containers"
    echo ""
    echo "default options will be loaded from"
    echo "    .prj/local/dockit"
    echo "    .prj/dockit"
    echo "    ~/.prjtool/dockit"
    echo ""
    echo "example:"
    echo "  $ dockit build"
    echo "  $ dockit --distro fedora:rawhide build linux"
    echo "  $ dockit --temp-ok --mr-clean --branch origin/main build"
}

case "$1" in
--std-flow)
    std_flow "$@"
    ;;
*)
    top_level "$@"
    ;;
esac
