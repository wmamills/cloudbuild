#!/bin/bash
# dockit: utility to make containers for normal development easy
# This is an early prototype

# stop on any uncaught error
set -e

check_debug() {
    if [ -n "${DOCKIT_DEBUG}" ]; then
        set -x
    fi
}

check_debug

# DOCKIT script path, works for both sides
MY_SCRIPT_NAME=$(basename $0)
MY_SCRIPT_FULL_PATH=$(readlink -f $0)
MY_SCRIPT_DIR=$(dirname $MY_SCRIPT_FULL_PATH)

# Names of vars to be transported to the other side
SAVE_VARS="
DOCKIT_DEBUG
DOCKIT_ACTION
DOCKIT_DISTRO
DOCKIT_ARCH
DOCKIT_HOSTNAME
DOCKIT_BRANCH
DOCKIT_TOP_DIR
DOCKIT_MOUNTDIR
DOCKIT_PRJ_SCRIPT
DOCKIT_REBUILD
DOCKIT_GENERIC
DOCKIT_ISOLATE
DOCKIT_READ_ONLY
DOCKIT_TEMP
MY_USER
MY_UID
MY_GID
OPT_SUDO
"

source $MY_SCRIPT_DIR/common.sh

# These are the lowest priority defaults
set_defaults() {
    # Specify defaults
    : ${DOCKIT_DISTRO:=ubuntu:latest}
    DISTRO_NAME=${DOCKIT_DISTRO//:/-}     # replace colons with dash

    # replace periods with dash
    : ${DOCKIT_HOSTNAME:=${DISTRO_NAME//./-}}

    : ${DOCKIT_MOUNTDIR:=/prj}
    : ${DOCKIT_BRANCH:=./WORKTREE}
    : ${DOCKIT_TOP_DIR:=.}
    : ${DOCKIT_REBUILD:=false}
    : ${DOCKIT_GENERIC:=false}
    : ${DOCKIT_ISOLATE:=false}
    : ${DOCKIT_READ_ONLY:=false}
    : ${DOCKIT_ARCH:=native}
    : ${DOCKIT_TEMP:=no}
    : ${DOCKIT_GLOBAL:=false}
    : ${MY_UID:=$(id -u)}
    : ${MY_GID:=$(id -g)}
    : ${MY_USER:=$(whoami)}
    # DOCKIT_OLDER_THAN not defined by default

    : ${OPT_SUDO:=yes}

    if [ -z "${DOCKIT_PRJ_SCRIPT}" ]; then
        if find_script prj_script.sh; then
            DOCKIT_PRJ_SCRIPT=$FOUND_SCRIPT
        fi
    fi
}

find_script() {
    SCRIPT_NAME=$1; shift

    for d in ./.prjinfo/local ./.prjinfo .; do
        FOUND_SCRIPT=$d/scripts/$SCRIPT_NAME
        if [ -f ${DOCKIT_TOP_DIR}/$FOUND_SCRIPT ]; then
            if [ -x ${DOCKIT_TOP_DIR}/$FOUND_SCRIPT ]; then
                return 0
            else
                echo "ignoring non-executable script $FOUND_SCRIPT"
            fi
        fi
    done

    FOUND_SCRIPT=""
    return 1
}

mktemp() {
    TMPDIR_NAME=${MY_SCRIPT_NAME}-${DOCKIT_ARCH}-${DISTRO_NAME}
    TMPDIR=.prjinfo/local/$TMPDIR_NAME
    mkdir -p $TMPDIR

    if [ -r $TMPDIR/name ]; then
        CONTAINER_NAME=$(cat $TMPDIR/name)
    else
        TMP1=$(cd . ; dirs +0)  # get project name with ~ for HOME
        TMP1=${TMP1//\~/H}       # replace tidle with 'H'
        TMP1=${TMP1//\//_}      # replace all slashes with underscores
        CONTAINER_NAME=dockit_${TMP1}__${DISTRO_NAME}_${DOCKIT_ARCH}
        echo $CONTAINER_NAME                    >$TMPDIR/name
    fi

    # make vars file
    TMPFILE=$TMPDIR/vars
    echo "# created automatically by dockit, do not edit" >$TMPFILE
    for v in $SAVE_VARS; do
        echo "export $v=\"${!v}\"" >>$TMPFILE
    done


    cp $MY_SCRIPT_FULL_PATH $MY_SCRIPT_DIR/common.sh $TMPDIR
}

mk_exec_script() {
    cat >$TMPDIR/dockit_exec.sh <<EOF
#!/bin/sh
${DOCKIT_MOUNTDIR}/${TMPDIR}/${MY_SCRIPT_NAME} $@
EOF
    chmod +x $TMPDIR/dockit_exec.sh
}

mk_exec2_script() {
    cat >$TMPDIR/dockit_exec2.sh <<EOF
#!/bin/sh
${DOCKIT_MOUNTDIR}/${TMPDIR}/${MY_SCRIPT_NAME} $@
EOF
    chmod +x $TMPDIR/dockit_exec2.sh
}

mk_idle_script() {
    cat >$TMPDIR/dockit_exec.sh <<EOF
#!/bin/sh
while true; do
    sleep 120
done
EOF
    chmod +x $TMPDIR/dockit_exec.sh
}

container_exists() {
    docker container inspect $CONTAINER_NAME >/dev/null 2>&1
}

# delete the container with the calculated name
delete_container() {
    echo -n "remove container "
    docker rm -f $CONTAINER_NAME
    rm -rf $TMPDIR/setup_done || true
}

run_batch() {
    mk_exec_script "$@"
    docker cp $TMPDIR/dockit_exec.sh ${CONTAINER_NAME}:/ >/dev/null
    docker start -ai $CONTAINER_NAME
}

run_interactive() {
    # docker start won't allocate a tty so we must do this
    # also docker exec -u wont set the user's other groups so we need a new
    # trampoline (dockit_exec2.sh)
    mk_idle_script
    mk_exec2_script "$@"
    docker cp $TMPDIR/dockit_exec.sh ${CONTAINER_NAME}:/ >/dev/null
    docker cp $TMPDIR/dockit_exec2.sh ${CONTAINER_NAME}:/ >/dev/null
    docker start $CONTAINER_NAME >/dev/null
    if docker exec -it -w $DOCKIT_MOUNTDIR \
        $CONTAINER_NAME /dockit_exec2.sh; then
        STATUS=0
    else
        STATUS=$?
    fi
    docker stop -t 0 $CONTAINER_NAME >/dev/null
    return $STATUS
}

do_top_level() {
    export DOCKIT_DISTRO
    export DOCKIT_PRJ_SCRIPT
    add_local_gitignore
    local_config
    mktemp

    if container_exists && $DOCKIT_REBUILD; then
        delete_container
    fi

    if ! container_exists; then
        rm -rf $TMPDIR/setup_done || true

        echo -n "Creating container ..."
        docker create \
        -v "${PWD}:${DOCKIT_MOUNTDIR}" \
        -h "$DOCKIT_HOSTNAME" \
        --name $CONTAINER_NAME \
        --label dockit \
        $DOCKIT_DISTRO \
        /dockit_exec.sh
    fi

    # do the setup
    if [ ! -f $TMPDIR/setup_done ]; then
        run_batch --internal-in-container-setup "$@"
        if [ $? -eq 0 ]; then
            touch $TMPDIR/setup_done
        else
            echo "Setup failed"
            exit 1
        fi
    fi

    case "$DOCKIT_ACTION" in
    shell)
        run_interactive --internal-userjmp /bin/bash -l "$@"
        STATUS=$?
        ;;
    icmd)
        run_interactive --internal-userjmp "$@"
        STATUS=$?
        ;;
    *)
        run_batch --internal-in-container-action "$@"
        STATUS=$?
        ;;
    esac

    case $DOCKIT_TEMP in
    "ok")
        if [ $STATUS -eq 0 ]; then
            delete_container
        fi
        ;;
    "yes")
        delete_container
        ;;
    "no")
        true
        ;;
    esac
}

default_build() {
    echo "Using default build function"
    for f in build build.sh build.py; do
        if [ -x $f ]; then
        echo "Found build script ./$f"
            ./$f "$@"
            return $?
        fi
    done

    if [ -f CMakeLists.txt ]; then
        echo "Found CMakeLists.txt"
        cmake -Bbuild . "$@"
        return $?
    elif [ -f Makefile ]; then
        echo "Found Makefile"
        make "$@"
        return $?
    fi

    echo "default_build: can't find an obvious build system"
}

default_actions() {
    case $DOCKIT_ACTION in
    build)
        default_build "$@"
        ;;
    cmd|icmd)
        "$@"
        ;;
    *)
        # internal error, it should have been caught earlier
        echo "unknown action $DOCKIT_ACTION in default_action"
        exit 1
        ;;
    esac
}

default_setup() {
    echo "Using default setup function"

    get_distro_type
    case "$TYPE" in
    debian)
        apt-get install -y build-essential git cmake bison flex
        ;;
    fedora|rhel)
        dnf install -y make automake gcc gcc-c++ git cmake kernel-devel
        ;;
    *)
        echo "don't know how to install sudo for distro type: $TYPE"
        exit 127
        ;;
    esac
}

userjmp() {
    # su man page suggests I do this:
    # setpriv --reuid=$MY_UID --regid=$MY_GID --init-groups --reset-env "$@"

    # util-linux < 2.33 does not support --reset-env
    ENV_OPT="--reset-env"
    if ! setpriv --help | grep -q -e "$ENV_OPT"; then
        ENV_OPT="$MY_SCRIPT_FULL_PATH --internal-do-userjmp2"
    fi

    setpriv --reuid=$MY_UID --regid=$MY_GID --init-groups $ENV_OPT "$@"
}

userjmp2() {
    export HOME="/home/$MY_USER"
    export SHLVL=0
    "$@"
}

in_container_preamble() {
    CTRL_DIR=$(cd "$(dirname $0)"; pwd)
    PRJ_DIR=$(cd $CTRL_DIR/../../..; pwd)

    cd ${PRJ_DIR}

    # read vars from TEMPFILE
    source $CTRL_DIR/vars
    check_debug

    PRJ_SCRIPT=${DOCKIT_PRJ_SCRIPT:+${PRJ_DIR}/${DOCKIT_PRJ_SCRIPT}}
}

in_container_setup() {
    in_container_preamble

    # do common admin setup of the container
    setup_distro

    if [ -x "${PRJ_SCRIPT}" ]; then
        # now execute the command the user specified (or project specific setup)
        ${PRJ_SCRIPT} admin_setup "$@"

        # project specific setup in user context
        userjmp "${PRJ_SCRIPT}" prj_setup "$@"
    else
        default_setup
    fi
    exit $?
}

in_container_action() {
    in_container_preamble

    if [ -x "${PRJ_SCRIPT}" ]; then
        # project specific build/run, again in user context
        userjmp ${PRJ_SCRIPT} prj_build "$@"
    else
        userjmp $MY_SCRIPT_FULL_PATH --internal-do-default_actions "$@"
    fi
    exit $?
}

# we start as root and need to jump to the user priv and command
in_container_userjmp() {
    in_container_preamble

    userjmp "$@"
    exit $?
}

is_action() {
    case "$1" in
    build|shell|cmd|icmd|purge|status)
        return 0
        ;;
    *)
        return 1
        ;;
    esac
}

help() {
    echo "usage: dockit [dockit options] <command> [command options]"
    echo "command is one of:"
    echo "build     do the default build command in the container"
    echo "shell     get a shell in the container"
    echo "cmd       do an arbitrary command in the container"
    echo "icmd      do an arbitrary interactive command in the container"
    echo "status    give a status of all containers for this project"
    echo "purge     delete all containers for this project"
    echo ""
    echo "dockit options:"
    echo "--branch          remote/branch"
    echo "                  specify the remote and branch to build"
    echo "                  default ./WORKTREE"
    echo "--distro name     specify the distro"
    echo "--script path     specify the project specific setup script"
    echo "--rebuild         rebuild the container"
    echo "--generic         don't personalize to the user"
    echo "--isolate         don't mount project dir in container"
    echo "--read-only       mount project dir in container as read-only"
    echo "--top-dir dir     specify the top project dir"
    echo "--mount           specify the mount point in the container of the"
    echo "                  top project dir. Can be absolute or relative"
    echo "                  to user's $HOME"
    echo "--temp            delete the container after it has finished"
    echo "--temp-ok         delete the container if the return code is ok"
    echo "--mr-clean        --rebuild --generic --isolate"
    echo ""
    echo "options for status or purge"
    echo "--global          look at all dockit created containers"
    echo ""
    echo "options for purge"
    echo "--older-than N    delete all containers that have not run in N days"
    echo ""
    echo "default options will be loaded from"
    echo "    .prjinfo/local/dockit"
    echo "    .prjinfo/dockit"
    echo "    ~/.prjtool/dockit"
    echo ""
    echo "example:"
    echo "  $ dockit build"
    echo "  $ dockit --distro fedora:rawhide build linux"
    echo "  $ dockit --temp-ok --mr-clean --branch origin/main build"
    echo "  $ dockit status"
    echo "  $ dockit --global --older-than 7 purge"
}

get_dockit_options() {
    SHIFT_COUNT=0
    while true; do
        case "$1" in
        --distro)
            DOCKIT_DISTRO=$2
            shift 2
            SHIFT_COUNT=$(( $SHIFT_COUNT + 2 ))
            ;;
        --arch)
            DOCKIT_ARCH=$2
            shift 2
            SHIFT_COUNT=$(( $SHIFT_COUNT + 2 ))
            ;;
        --script)
            DOCKIT_PRJ_SCRIPT=$2
            shift 2
            SHIFT_COUNT=$(( $SHIFT_COUNT + 2 ))
            ;;
        --branch)
            DOCKIT_BRANCH=$2
            shift 2
            SHIFT_COUNT=$(( $SHIFT_COUNT + 2 ))
            ;;
        --top-dir)
            DOCKIT_TOP_DIR=$2
            shift 2
            SHIFT_COUNT=$(( $SHIFT_COUNT + 2 ))
            ;;
        --rebuild)
            DOCKIT_REBUILD=true
            shift 1
            SHIFT_COUNT=$(( $SHIFT_COUNT + 1 ))
            ;;
        --generic)
            DOCKIT_GENERIC=true
            shift 1
            SHIFT_COUNT=$(( $SHIFT_COUNT + 1 ))
            ;;
        --isolate)
            DOCKIT_ISOLATE=true
            shift 1
            SHIFT_COUNT=$(( $SHIFT_COUNT + 1 ))
            ;;
        --read-only)
            DOCKIT_READ_ONLY=true
            shift 1
            SHIFT_COUNT=$(( $SHIFT_COUNT + 1 ))
            ;;
        --temp)
            DOCKIT_TEMP=yes
            shift 1
            SHIFT_COUNT=$(( $SHIFT_COUNT + 1 ))
            ;;
        --temp-ok)
            DOCKIT_TEMP=ok
            shift 1
            SHIFT_COUNT=$(( $SHIFT_COUNT + 1 ))
            ;;
        --older-than)
            DOCKIT_OLDER_THAN=$2
            shift 1
            SHIFT_COUNT=$(( $SHIFT_COUNT + 2 ))
            ;;
        --global)
            DOCKIT_GLOBAL=true
            shift 1
            SHIFT_COUNT=$(( $SHIFT_COUNT + 1 ))
            ;;
        --debug)
            DOCKIT_DEBUG=yes
            shift 1
            SHIFT_COUNT=$(( $SHIFT_COUNT + 1 ))
            check_debug
            ;;
        --*)
            echo unknown option "$1"
            exit 2
            ;;
        *)
            return
            ;;
        esac
    done
}

do_purge() {
    local_config

    if $DOCKIT_GLOBAL; then
        if [ -n "$DOCKIT_OLDER_THAN" ]; then
            UNTIL="$(( $DOCKIT_OLDER_THAN * 24 ))h"
        else
            UNTIL="10s"
        fi
        docker container prune -f \
            --filter "until=$UNTIL" \
            --filter "label=dockit"
    else
        for i in .prjinfo/local/${MY_SCRIPT_NAME}-*; do
            if [ -d $i -a -r $i/name ]; then
                CONTAINER_NAME=$(cat $i/name)
                if delete_container; then
                    rm -rf $i
                fi
            fi
        done
    fi
}

do_status() {
    local_config

    if $DOCKIT_GLOBAL; then
        docker container ls -a -s \
            --filter "label=dockit" \
            --format "table {{ .Names }}\t{{ .Image }}\t{{ .Size }}\t{{ .Status }}"
    else
        for i in .prjinfo/local/${MY_SCRIPT_NAME}-*; do
            if [ -d $i -a -r $i/name ]; then
                CONTAINER_NAME=$(cat $i/name)
                if container_exists; then
                    DOCKIT_HOSTNAME=$(
                        unset DOCKIT_HOSTNAME
                        source $i/vars;
                        : ${DOCKIT_HOSTNAME:=$DOCKIT_DISTRO};
                        echo $DOCKIT_HOSTNAME)
                    printf "%-40s" $DOCKIT_HOSTNAME
                    docker container list -a -s \
                    --format "{{ .Size }}\t{{ .Status }}" \
                    --filter="name=${CONTAINER_NAME}"
                else
                    echo "$CONTAINER_NAME  <deleted>"
                fi
            fi
        done
    fi
}

do_action() {
    case $DOCKIT_ACTION in
    # These commands are done on the host side
    purge|status)
        do_${DOCKIT_ACTION}
        ;;

    # all others are done in the container, get there first
    # we already know the action is valid as it passed is_action
    *)
        do_top_level "$@"
        ;;
    esac
}

# main on host side
main() {
    get_dockit_options "$@"; shift $SHIFT_COUNT
    if is_action $1; then
        DOCKIT_ACTION=$1; shift
        do_action "$@"
    elif [ -z "$1" ]; then
        help
        exit 1
    else
        abort "Unknown action $1"
    fi
}

# echo "Invocation $0 " "$@"

# First off figure out if we are on the host or the container
case "$1" in
--internal-in-container-setup)
    shift
    in_container_setup "$@"
    ;;
--internal-in-container-action)
    shift
    in_container_action "$@"
    ;;
--internal-userjmp)
    shift
    in_container_userjmp "$@"
    ;;
--internal-do-*)
    CMD=${1#--internal-do-}
    shift
    # call internal function by name matching * above
    in_container_preamble
    $CMD "$@"
    ;;
*)
    main "$@"
    ;;
esac
