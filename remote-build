#!/bin/bash

if [ x"$1" == x"-d" ]; then
    set -x
    shift
fi

SCRIPT=$(basename $0)
SCRIPT_PATH=$0
REMOTE_SCRIPT_PATH=.local/temp-bin
REMOTE_SCRIPT=$REMOTE_SCRIPT_PATH/$SCRIPT

set_defaults() {
    : ${BUILD_CONFIG:=default}
    : ${PRJ_NAME:=$(basename $PWD)}
    : ${REMOTE_NAME:=dummy-remote}
    : ${REMOTE_DIR_BASE:=.}
    : ${BUILD_DIR:=build}
    : ${REMOTE_DIR:=$REMOTE_DIR_BASE/$PRJ_NAME/$BUILD_CONFIG}
    : ${OUTPUT_DIR_BASE:=build-$(date +%Y-%m-%d)}
    : ${OUTPUT_DIR:=$OUTPUT_DIR_BASE/$BUILD_CONFIG}
}

local_config() {
    # allow user to override default settings
    # normally settings should use
    #   : ${VAR:=value}
    # in which case the first one processed wins
    # ENV vars, project local, the project checked in, the global user
    # use of
    #   VAR=value
    # means an override, last one processed wins
    # global user, project checked in, project local, env vars
    for d in .prjinfo/local .prjinfo  ~/.prjinfo ; do
        if [ -r $d/setenv ]; then
            . $d/setenv
        fi
    done

    set_defaults
}

push_this_git() {
    echo "*** pushing $1 to $REMOTE_NAME:$REMOTE_DIR/$1"
    ssh $REMOTE_NAME bash -c "\"mkdir -p $REMOTE_DIR/$1; cd $REMOTE_DIR/$1; git init\""
    (cd $1; git push -f $REMOTE_NAME:$REMOTE_DIR/$1/.git HEAD:pending)
    ssh $REMOTE_NAME bash -c "\"cd $REMOTE_DIR/$1; git reset --hard pending\""
}

push_all_git() {
    for gd in $(find layers -maxdepth 3 -name .git -type d); do
        d=$(dirname $gd)
        push_this_git $d
    done
}

push_this_script() {
    ssh $REMOTE_NAME mkdir -p $REMOTE_SCRIPT_PATH
    scp $SCRIPT_PATH $REMOTE_NAME:$REMOTE_SCRIPT
    ssh $REMOTE_NAME chmod +x $REMOTE_SCRIPT
}

do_build() {
    case $1 in
    *.yml)
        ~/.local/bin/kas build --update $1
        ;;
    *.sh)
        ./$1
    esac
}

do_checkout() {
    case $1 in
    *.yml)
        echo "*** do checkout $1"
        ~/.local/bin/kas checkout --force-checkout --update $1
        ;;
    esac
}

check_script_for_info() {
    if [ -x $1 ]; then
        if grep -q "prjtools: support get-info" $1 >/dev/null; then
            eval $($1 --get-info )
        fi
    fi
}

help() {
    echo "do a build on a remote machine via ssh"
    echo ""
    echo "usage: ./scripts/remote-build build-def"
    echo "where build-def is a kas *.yml file or a *.sh file"
    echo ""
    echo "The build will be done for the current git HEAD so things need to be"
    echo "checked in order to be seen by the remote build.  The checked in manifest"
    echo "will be used for kas yml files so you need to push any local changes"
    echo "to other git projects somewhere where the remote machine can see them"
    echo "and you need to adjust the manifest."
    echo ""
    echo "the remote machine and base build path come from environment variables"
    echo "    REMOTE_NAME"
    echo "    REMOTE_DIR_BASE"
    echo ""
    echo "The REMOTE_NAME should be something that will work for your user "
    echo "for ssh and scp.  If you do not wish to be prompted for a ssh"
    echo "private key password use a ssh-agent or a throw-away key with no password."
    echo ""
    echo "The REMOTE_DIR_BASE will be the base path used for the build directory."
    echo "relative paths will be from the ssh user's home dir just like scp."
    echo "absolute paths will work also provided the ssh user has permission."
    echo "The local projects name (its directory) and the build config will be"
    echo "add to the REMOTE_DIR_BASE by default.  If you want more control or"
    echo "wish to do all builds in the same directory set REMOTE_DIR instead"
    echo ""
    echo 'Example: .prjinfo/local/setenv'
    echo ': ${REMOTE_NAME:=ubuntu@192.168.42.36}'
    echo ': ${REMOTE_DIR_BASE:=/media/my-big-disk/my-user}'
    echo ""
    echo "The variable vaules can come from the user shell context or from"
    echo "various files.  The settings in the files below are normally set"
    echo "with weak definitions like this:"
    echo ""
    echo ': ${VARNAME:=VALUE}'
    echo ""
    echo "In this way the priority order becomes:"
    echo "  environment variables from the users shell"
    echo "  project local settings          ./.prjinfo/local/setenv"
    echo "  project checked in settings     ./.prjinfo/setenv"
    echo "  user home dir settings          ~/.prjinfo/setenv"
}

#echo "running on $(hostname) with args=$@"

if [ -z "$1" ]; then
    help
elif [ "$1" == on-remote ]; then
    cd $2
    shift 2
    do_build "$@"
elif [ "$1" == checkout ]; then
    cd $2
    shift 2
    do_checkout "$@"
else
    case $1 in
    *.yml)
        IS_YAML=true
        ;;
    *.sh)
        IS_YAML=false
        ;;
    *)
        echo "Expected either *.yml or *.sh and got $1"
        exit 2
        ;;
    esac

    # get sub-dir for build
    TMP=${1%.yml}
    TMP=${TMP%.sh}
    BUILD_CONFIG=$TMP

    check_script_for_info "$@"

    local_config
    if [ x"$BUILD_DIR" != x"build" ]; then
        BUILD_DIR_MSG="( with build dir of $BUILD_DIR )"
    else
        BUILD_DIR_MSG=""
    fi
    echo "Building on $REMOTE_NAME in path $REMOTE_DIR $BUILD_DIR_MSG"

    push_this_git .
    push_this_script
    if $IS_YAML & false; then
        ssh -t $REMOTE_NAME $REMOTE_SCRIPT checkout $REMOTE_DIR "$@"
        push_all_git
    fi
    ssh -t $REMOTE_NAME $REMOTE_SCRIPT on-remote $REMOTE_DIR "$@"
    if [ $? -eq 0 -a -n "$OE_RESULT_ACTION" ]; then
        mkdir -p ${OUTPUT_DIR}
        cd $OUTPUT_DIR
        oe-results $REMOTE_NAME $REMOTE_DIR/$BUILD_DIR $OE_RESULT_ACTION $OE_RESULT_PARTS
    fi
fi
