#! /bin/bash

# Cut down version of Bill's cloudbuild tool
# handles only AWS, no data disks, fewer options

# Note this intentionally uses AWS CLI v1
# At the time of writing AWS CLI v2 is ONLY delivered as a container image
# and Amazon refuses to deliver any other way (pip apt snap flatpak etc)
# This makes it very complex to use WITHIN a container
# Longer term I will go directly to boto API's from python and opt out of AWS CLI

set -e

if [ "$1" = "-d" ]; then
    set -x
    shift
fi

MOUNTDIR=/prj
SCRIPT_NAME=$(basename $0)
SCRIPT_FULL_PATH=$(readlink -f $0)
SCRIPT_DIR=$(dirname $SCRIPT_FULL_PATH)
ALL_MODE=none

source $SCRIPT_DIR/common.sh

check_setup() {
    # make sure aws command is avilable
    if ! which aws >/dev/null; then
        echo "No aws command found"
        echo "try: pip3 install --user awscli"
        abort "need aws cli v1.x"
    fi
    # make sure user has aws credentials
    if [ ! -r ~/.aws/credentials ]; then
        echo "aws credentials are not setup"
        echo "see https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html"
        abort "can't read ~/.aws/credentials"
    fi
    # make sure user has ssh config set up to include ~/.ssh/config.d/*
    if ! grep -qE '^ *[Ii]nclude  *config.d/*' ~/.ssh/config; then
        echo "add:"
        echo "Include config.d/* "
        echo "to the top of ~/.ssh/config"
        abort "need ~/.ssh/config.d support"
    fi
    local_config
}

set_defaults() {
    : ${EC2_INSTANCE_TYPE:=m6i.2xlarge}
    : ${DISTRO:=ubuntu-20.04}
    : ${OS_DISK_SIZE:=250}
    : ${EC2_NAME:=aws01}
    : ${AWS_PROFILE:=default}
    : ${EC2_USERNAME:=ubuntu}
    : ${SSH_CONFIGD_NUM:=50}
    : ${SSH_CONFIGD_OPTIONS:=    ForwardAgent yes}
    : ${EC2_SEC_GROUPS:=ssh web rdp}
    : ${EC2_KEYPAIR_NAME:=default}
    : ${EC2_PRIVATE_KEY:=~/.ssh/id_rsa}
}

# after command line args are processed, calculate config
compute_config() {
    # computed vars
    SSH_CONFIGD_FILE="$HOME/.ssh/config.d/${SSH_CONFIGD_NUM}-${EC2_NAME}"

}

aws_get_instance_id() {
    # get instanceID
    EC2_INSTANCE=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$EC2_NAME" --query Reservations[*].Instances[*].[InstanceId] --output text)
    if [[ $EC2_INSTANCE =~ ^i-[0-9a-f]*$ ]]; then
        true
    else
        EC2_INSTANCE=none
        false
    fi
}

aws_get_state() {
    # get instance state
    EC2_STATE=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$EC2_NAME" --query Reservations[*].Instances[*].State.Name --output text)
    #echo "Current state is $EC2_STATE"
}

# for reference, not used
aws_get_instance_and_state() {
    # get instance ID and state
    aws ec2 describe-instances \
        --filters "Name=tag:Name,Values=$EC2_NAME" \
        --query 'Reservations[*].Instances[*].{InstanceId:InstanceId,State:State.Name}' \
        --output text
    # returns: i-0a1812426906d0002	stopped
}

# get the important data about instances in one region/profile
aws_get_all_instances() {
    # this is not right yet, the name: is an array of size 1 instead of being flat
    aws ec2 describe-instances \
        --query 'Reservations[*].Instances[*].{name: Tags[?Key == `Name`].Value, id:InstanceId,state:State.Name}' \
        --output text
}

aws_start_inst() {
    echo "Starting $EC2_NAME $EC2_INSTANCE"
    # start the instance
    aws ec2 start-instances --instance-ids $EC2_INSTANCE >/dev/null

    # wait for it to be running
    aws ec2 wait instance-running --instance-id $EC2_INSTANCE
}

aws_get_ip() {
    # get public IP address
    NEW_IP=$(aws ec2 describe-instances \
        --filters "Name=tag:Name,Values=$EC2_NAME" \
        --query Reservations[*].Instances[*].[PublicIpAddress] \
        --output text)
}

get_old_ip() {
    # forget any old IP address from known ssh keys
    if [ -r $SSH_CONFIGD_FILE ]; then
        OLD_IP=$(cat $SSH_CONFIGD_FILE | grep Hostname | awk -e '{ print $2 }' | head -n 1)
    else
        OLD_IP=none
    fi
}

forget_old_ip() {
    # forget any old IP address from known ssh keys
    if [ x"$OLD_IP" != x"none" ]; then
        echo forgeting $OLD_IP
        ssh-keygen -R $OLD_IP >/dev/null 2>&1
    fi
}

# write the ssh config.d entry
update_ssh_configd() {
    # does the file already exist?
    if [ -r $SSH_CONFIGD_FILE ]; then
        # yes, then just update the IP
        sed -i -e "s/Hostname .*/Hostname $NEW_IP/" $SSH_CONFIGD_FILE
        return
    fi

    cat >$SSH_CONFIGD_FILE <<EOF
Host $EC2_NAME
    Hostname $NEW_IP
    User $ROOT_USER
$SSH_CONFIGD_OPTIONS
EOF
}

aws_check_ip() {
    aws_get_ip
    get_old_ip
    if [ x"$NEW_IP" != x"$OLD_IP" ]; then
        echo "syncing ssh state"
        forget_old_ip
        update_ssh_configd
        SSH_STRICT_KEY="no"
    else
        SSH_STRICT_KEY="yes"
    fi
}

wait_for_ssh() {
    #echo "waiting for ssh"
    while true; do
        # prime the new ssh key for this IP
        ssh $EC2_NAME -o "StrictHostKeyChecking $SSH_STRICT_KEY" \
            -o ConnectTimeout=10 \
            echo "$EC2_NAME is Ready at $NEW_IP" 2>/dev/null && return
        echo "Still waiting for ssh"
        sleep 10
    done
}

aws_start() {
    aws_get_instance_id || abort "No instance named $EC2_NAME found"
    aws_get_state
    if [ $EC2_STATE != "running" ]; then
        aws_start_inst
    else
        echo "$EC2_NAME $EC2_INSTANCE is already running"
    fi
    aws_get_distro_info
    aws_check_ip
    wait_for_ssh $SSH_PRIME_NEEDED
}

aws_create_inst() {
    echo "Creating $EC2_NAME as $EC2_INSTANCE_TYPE running $DISTRO"
    aws ec2 run-instances \
        --image-id $AMI \
        --instance-type $EC2_INSTANCE_TYPE \
        --block-device-mappings "DeviceName=$ROOT_DEVNAME,Ebs={VolumeSize=$OS_DISK_SIZE}" \
        --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$EC2_NAME}]" \
        --security-groups $EC2_SEC_GROUPS \
        --key-name $EC2_KEYPAIR_NAME >/dev/null
    aws_get_instance_id || abort $EC2_NAME not found after create
    echo "waiting for $EC2_NAME $EC2_INSTANCE to be running"
    aws ec2 wait instance-running --instance-id $EC2_INSTANCE
}

aws_create() {
    aws_get_instance_id && abort "Instance named $EC2_NAME $EC2_INSTANCE already exists"
    aws_get_arch
    aws_get_ami
    aws_create_inst
    aws_check_ip
    wait_for_ssh $SSH_PRIME_NEEDED
}

aws_run() {
    if aws_get_instance_id; then
        aws_start
    else
        aws_create
    fi
}

aws_stop() {
    aws_get_instance_id || abort "No instance named $EC2_NAME found"

    echo "Stopping $EC2_NAME $EC2_INSTANCE"
    # stop the instance
    aws ec2 stop-instances --instance-ids $EC2_INSTANCE >/dev/null

    # wait for instance to be stopped
    aws ec2 wait instance-stopped --instance-id $EC2_INSTANCE
}

# aws ec2 describe-instance-types --instance-types t2.micro --query 'InstanceTypes[*].[ProcessorInfo.SupportedArchitectures[*]]' --output text
# returns: i386	x86_64
# change to SupportedArchitectures[0] to just ge the first one
# summary of all instance types
# aws ec2 describe-instance-types --query 'InstanceTypes[*].[InstanceType,ProcessorInfo.SupportedArchitectures[0],VCpuInfo.DefaultVCpus,MemoryInfo.SizeInMiB]' --output text

aws_get_arch() {
    ALL_ARCH=$(aws ec2 describe-instance-types \
        --instance-types $EC2_INSTANCE_TYPE \
        --query 'InstanceTypes[*].[ProcessorInfo.SupportedArchitectures]' \
        --output text)
    for EC2_ARCH in $ALL_ARCH; do
        case $EC2_ARCH in
        x86_64)
            DEB_ARCH=amd64
            RH_ARCH=x86_64
            return
            ;;
        arm64)
            DEB_ARCH=arm64
            RH_ARCH=aarch64
            return
            ;;
        esac
    done
    abort "No supported arch in ALL_ARCH=$ALL_ARCH"
}

aws_get_password() {
    aws_get_instance_id || abort "No instance named $EC2_NAME found"
    CRYPT_TEXT=$(aws ec2 get-password-data --instance-id $EC2_INSTANCE \
        --query "PasswordData" --output text)

    echo "EC2_PRIVATE_KEY=$EC2_PRIVATE_KEY"

    printf "$CRYPT_TEXT" | base64 --decode | \
        openssl pkeyutl -decrypt -inkey $EC2_PRIVATE_KEY; echo

    # Print IP addr, if it has one
    if aws_get_ip; then
        echo "IPv4: $NEW_IP"
    fi
}

aws_get_distro_info() {
    UBUNTU_OWNER=099720109477
    DEBIAN_DAILY_OWNER=903794441882
    DEBIAN_OWNER=136693071363
    FEDORA_OWNER=125523088429
    CENTOS_OWNER=$FEDORA_OWNER
    WINDOWS_OWNER=801119661308

    case $DISTRO in
    ubuntu-20.04)
        ROOT_USER=ubuntu
        OWNER=$UBUNTU_OWNER
        IMAGE_NAME="ubuntu/images/hvm-ssd/ubuntu-focal-20.04-${DEB_ARCH}-server-"
        ;;
    ubuntu-18.04)
        ROOT_USER=ubuntu
        OWNER=$UBUNTU_OWNER
        IMAGE_NAME="ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-${DEB_ARCH}-server-"
        ;;
    ubuntu*)
        ROOT_USER=ubuntu
        OWNER=$UBUNTU_OWNER
        REST=${DISTRO#ubuntu-}
        IMAGE_NAME="ubuntu/images/hvm-ssd/ubuntu-*-${REST}-${DEB_ARCH}-server-"
        ;;
    debian-10)
        ROOT_USER=admin
        OWNER=$DEBIAN_OWNER
        IMAGE_NAME="debian-10-${DEB_ARCH}-"
        ;;
    debian-11)
        ROOT_USER=admin
        OWNER=$DEBIAN_OWNER
        IMAGE_NAME="debian-11-${DEB_ARCH}-"
        ;;
    debian-sid|debian-unstable)
        ROOT_USER=admin
        OWNER=$DEBIAN_DAILY_OWNER
        IMAGE_NAME="debian-sid-${DEB_ARCH}-daily-"
        ;;
    debian*)
        ROOT_USER=admin
        OWNER=$DEBIAN_OWNER
        IMAGE_NAME="${DISTRO}-${DEB_ARCH}-"
        ;;
    centos-7*|centos-8*)
        ROOT_USER=centos
        OWNER=$CENTOS_OWNER
        IMAGE_NAME="CentOS ${DISTRO#centos-}"
        ;;
    centos-stream-8)
        # assume centos-stream-8 is the exception for ROOT_USER
        ROOT_USER=centos
        OWNER=$CENTOS_OWNER
        REST=${DISTRO#centos-stream}
        REST=${REST#-}
        IMAGE_NAME="CentOS Stream ${REST}"
        ;;
    centos-stream*)
        # current centos-stream-9 images use e2c-user and root user.
        # assume that is the new norm
        # set distro to centos-stream-{8,9,etc} or just centos-stream for latest
        ROOT_USER=ec2-user
        OWNER=$CENTOS_OWNER
        REST=${DISTRO#centos-stream}
        REST=${REST#-}
        IMAGE_NAME="CentOS Stream ${REST}"
        ;;
    fedora-coreos*)
        # Fedora spins too fast to keep up.  Let the distro name be the image name
        # Set distro to fedora-coreos-NN
        # NN is 34 35 etc 
        # TODO: currently this find the latest image which is probably testing or next
        ROOT_USER=core
        OWNER=$FEDORA_OWNER
        IMAGE_NAME="${DISTRO}"
        ;;        
    fedora*)
        # Fedora spins too fast to keep up.  Let the distro name be the image name
        # for a server, a user would expect fedora-NN to be Fedora-Cloud-Base-NN
        # NN is 34 35 etc or rawhide
        ROOT_USER=fedora
        OWNER=$FEDORA_OWNER
        REST=${DISTRO#fedora}
        if [ x"$REST" == x"-rawhide" ]; then
            REST="-Rawhide"
        fi
        IMAGE_NAME="Fedora-Cloud-Base${REST}"
        ;;
    windows-2022)
        ROOT_USER=Administrator
        OWNER=$WINDOWS_OWNER
        IMAGE_NAME="Windows_Server-2022-English-Full-Base-"
        ;;
    *)
        abort Unknown distro $DISTRO
        ;;
    esac
}

aws_get_ami() {
    aws_get_distro_info

    # find images that meet the creteria and sort them and take the "newest"
    AMI_NAME=$(aws ec2 describe-images \
        --owner $OWNER \
        --filter Name=architecture,Values=$EC2_ARCH \
            "Name=name,Values=${IMAGE_NAME}*" \
        --query 'Images[*].[ImageId,CreationDate,Name]' \
        --output text | sort -r --key 2 | head -n 1)
    AMI=$(echo $AMI_NAME | awk -e '{print $1}' )
    if [[ $AMI =~ ^ami-[0-9a-f]*$ ]]; then
        echo "found AMI $AMI_NAME"
        # describe given image with full JSON
        # aws ec2 describe-images --image-ids $AMI
            # aws ec2 describe-images --image-id  $AMI
        ROOT_DEVNAME=$(aws ec2 describe-images \
            --image-id  $AMI \
            --query "Images[*].RootDeviceName" --output text)
        : ${ROOT_DEVNAME:=/dev/sda1}    # just in case it is not set
        true
    else
        echo "no AMI found for $DISTRO on $EC2_ARCH"
        AMI=none
        false
    fi
}

aws_image() {
    aws_get_arch
    aws_get_distro_info
    OWNER_OPT="--owner $OWNER"

    case $ALL_MODE in
    "image")
        PAGER="cat"
        ;;
    "owner")
        PAGER="cat"
        IMAGE_NAME=""
        ;;
    "everything")
        PAGER="cat"
        IMAGE_NAME=""
        OWNER_OPT=""
        ;;
    "none")
        PAGER="head -n 1"
        ;;
    *)
        abort "Unknown ALL_MODE=$ALL_MODE"
        ;;
    esac

    # find images that meet the creteria and sort them and take the "newest"
    aws ec2 describe-images \
        $OWNER_OPT \
        --filter Name=architecture,Values=$EC2_ARCH \
            "Name=name,Values=${IMAGE_NAME}*" \
        --query 'Images[*].[ImageId,CreationDate,Name]' \
        --output text | sort -r --key 2 | $PAGER
}

# test life cycle commands
aws_test_lc() {
    aws_get_instance_id && abort "Won't test if name already exists"
    aws_run
    ssh $EC2_NAME cat /etc/os-release
    aws_stop
    aws_start
    ssh $EC2_NAME free -h
    aws_destroy
}

# test to see if a distro works
aws_test_basic() {
    aws_create
    ssh $EC2_NAME cat /etc/os-release
    ssh $EC2_NAME uname -a
    ssh $EC2_NAME lscpu
    ssh $EC2_NAME free -h
    ssh $EC2_NAME df -h .
    aws_destroy
}

aws_destroy() {
    if aws_get_instance_id; then
        echo "destoying $EC2_NAME $EC2_INSTANCE"
        aws ec2 create-tags --resources $EC2_INSTANCE --tags "Key=Name,Value=DELETED_${EC2_NAME}"
        aws ec2 terminate-instances --instance-ids $EC2_INSTANCE >/dev/null
        aws ec2 wait instance-terminated --instance-ids $EC2_INSTANCE
    else
        echo "$EC2_NAME does not exist"
    fi
    if [ -e $SSH_CONFIGD_FILE ]; then
        echo "removing $SSH_CONFIGD_FILE"
        rm $SSH_CONFIGD_FILE
    fi
}

aws_get-console() {
    aws_get_instance_id || abort "No instance named $EC2_NAME found"
    aws_get_state
    if [ $EC2_STATE != "running" ]; then
        echo "$EC2_NAME $EC2_INSTANCE is not running"
    else
        aws ec2 get-console-output --instance-id $EC2_INSTANCE --output text
    fi    
}

aws_status() {
    aws_get_all_instances
}

is_action() {
    case "$1" in
    run|stop|destroy|start|create|test_basic|test_lc|status|get-console|image)
        return 0
        ;;
    get_password)
        return 0
        ;;
    *)
        return 1
        ;;
    esac
}

is_default_server_name() {
    case "$1" in
    default|def)
        return 0
        ;;
    *)
        return 1
        ;;
    esac
}

help() {
    echo "usage: ec2 [server-name] run|stop|destroy|start"
    echo "run       create or start the machine"
    echo "stop      stop but don't destroy the machine"
    echo "destroy   terminate the instance and destroy disk data"
    echo "start     start machine if stopped, don't ever create"
    echo "create    create the machine or fail if existing"
    echo "          useful to ensure a clean start"
    echo "status    list all instances in given profile"
    echo "get-console  get console output"
    echo "image     list image(s) for distro and instance type"
    echo ""
    echo "options for create (or run):"
    echo "--distro name     specify the distro"
    echo "--inst  type      AWS instance type"
    echo "--os-disk num     size in GB of root disk"
    echo ""
    echo "options for image:"
    echo "--all             list all images matching name & owner"
    echo "--all-owner       list all images matching distro owner"
    echo "--all-all         list all images in region (slow)"
    echo "--distro & --inst as above"
    echo ""
    echo "supported distros are:"
    echo "  ubuntu-20.04 ubuntu-18.04 ubuntu*"
    echo "  debian-11 debian-10 debian-unstable debian*"
    echo "  centos-7 centos-8"
    echo "  centos-stream-8 centos-stream-*"
    echo "  fedora-coreos*"
    echo "  fedora-* (34 35 etc or rawhide)"
    echo "  windows-2022"
    echo ""
    echo "example:"
    echo "  $ ec2 my-server run --distro ubuntu-20.04 --inst t3.small --os-disk 10"
    echo "  $ ssh my-server"
}

get_aws_options() {
    SHIFT_COUNT=0
    while true; do
        case "$1" in
        --distro)
            DISTRO=$2
            shift 2
            SHIFT_COUNT=$(( $SHIFT_COUNT + 2 ))
            ;;
        --inst)
            EC2_INSTANCE_TYPE=$2
            shift 2
            SHIFT_COUNT=$(( $SHIFT_COUNT + 2 ))
            ;;
        --os-disk)
            OS_DISK_SIZE=$2
            shift 2
            SHIFT_COUNT=$(( $SHIFT_COUNT + 2 ))
            ;;
        --all)
            ALL_MODE=image
            shift 1
            SHIFT_COUNT=$(( $SHIFT_COUNT + 1 ))
            ;;
        --all-owner)
            ALL_MODE=owner
            shift 1
            SHIFT_COUNT=$(( $SHIFT_COUNT + 1 ))
            ;;
        --all-all)
            ALL_MODE=everything
            shift 1
            SHIFT_COUNT=$(( $SHIFT_COUNT + 1 ))
            ;;
        --*)
            echo unknown option "$1"
            exit 2
            ;;
        *)
            return
            ;;
        esac
    done
}


# notes:
# 3rd party cost reporter:
# curl -L 'ec2.shop?region=us-west-1&filter=.4xlarge'
# curl -L 'ec2.shop?region=us-west-1&filter=.4xlarge' -H 'accept: json' | jq
# https://github.com/yeo/ec2.shop#api-document
# does not seem to have some new instance types like m6i

# main
check_setup

# get the server name to work with
# if not supplied or is the "default" name, use config from project or user
if ! is_action "$1"; then
    if ! is_default_server_name "$1"; then
        EC2_NAME=$1
    fi
    shift
else
    NO_SERVER_NAME=true
fi

if is_action $1; then
    ACTION=$1; shift
    get_aws_options "$@"; shift $SHIFT_COUNT
    compute_config
    aws_${ACTION}
elif [ -z "$1" ]; then
    help
    exit 1
else
    abort "Unknown command $1"
fi
