#!/bin/bash

set -e
REMOTE_DEBUG=""

if [ "$1" = "-d" ]; then
    REMOTE_DEBUG="-d"
    set -x
    shift
fi

SCRIPT=$(basename $0)
SCRIPT_PATH=$0
REMOTE=$1
REMOTE_PATH=$2
ACTION=$3
REMOTE_SCRIPT_PATH=.local/temp-bin/
ALL="conf build-logs deploy task-logs sstate downloads downloads-git2"
MOST="conf build-logs deploy task-logs"

first_word() {
    echo "$1"
}

make_build_logs() {
    rm -rf build-logs || true
    mkdir -p build-logs/$OE_TMP_DIR
    cp *.log build-logs/
    cp -a $OE_TMP_DIR/log build-logs/$OE_TMP_DIR
    cp -a $OE_TMP_DIR/buildstats build-logs/$OE_TMP_DIR
}

make_task_logs() {
    rm -rf task-logs || true
    mkdir -p task-logs/$OE_TMP_DIR
    find $OE_TMP_DIR/work{,-shared} -type d -name temp | \
        xargs -n 1 -i bash -c "mkdir -p task-logs/{}; cp -a {}/* task-logs/{}/"
}

set_tmp_dir() {
    OE_TMP_DIR=$(first_word tmp*)
    if [ -z "$OE_TMP_DIR" -o ! -d $OE_TMP_DIR ]; then
        echo "no OE tmp-* dir, did any build happen?"
        exit 99
    fi
}

on_remote_get_tmp_dir() {
    set_tmp_dir
    echo "$OE_TMP_DIR"
}

on_remote_prep_rsync() {
    set_tmp_dir
    echo "OE_TMP_DIR=$OE_TMP_DIR"

    while [ -n "$1" ]; do
        case "$1" in
        deploy|conf|downloads|downloads-git2|sstate)
            # nothing to do in these cases
            true
            ;;
        build-logs)
            echo "making build-logs dir"
            make_build_logs
            ;;
        task-logs)
            echo "making task-logs dir"
            make_task_logs
            ;;
        all)
            on_remote_prep_rsync $ALL
            ;;
        most)
            on_remote_prep_rsync $MOST
            ;;
        *)
            echo "Unknown part $1, skipping"
        esac
        shift
    done
}

on_remote_make_tar() {
    set_tmp_dir
    echo "OE_TMP_DIR=$OE_TMP_DIR"

    while [ -n "$1" ]; do
        case "$1" in
        deploy)
            echo "making deploy archive"
            time tar caf deploy.tar.gz $OE_TMP_DIR/deploy
            ;;
        build-logs)
            echo "making build-logs archive"
            make_build_logs
            time tar caf build-logs.tar.xz build-logs
            ;;
        conf)
            echo "making conf archive"
            time tar caf conf.tar.gz conf/
            ;;
        task-logs)
            echo "making task-logs archive"
            make_task_logs
            time tar caf task-logs.tar.xz task-logs
            ;;
        downloads)
            echo "making downloads archive"
            time tar caf downloads.tar --exclude="*.done" --exclude="git2" downloads/
            ;;
        downloads-git2)
            echo "making downloads-git2 archive"
            time tar caf downloads-git2.tar --exclude="*.done" downloads/git2
            ;;
        sstate)
            echo "making sstate archive"
            time tar caf sstate.tar sstate-cache/
            ;;
        all)
            on_remote_make_tar $ALL
            ;;
        most)
            on_remote_make_tar $MOST
            ;;
        *)
            echo "Unknown part $1, skipping"
        esac
        shift
    done
}

get_output() {
    while [ -n "$1" ]; do
        case "$1" in
        deploy|conf)
            scp $REMOTE:$REMOTE_PATH/$1.tar.gz .
            ;;
        build-logs|task-logs)
            scp $REMOTE:$REMOTE_PATH/$1.tar.xz .
            ;;
        downloads|sstate|downloads-git2)
            scp $REMOTE:$REMOTE_PATH/$1.tar .
            ;;
        all)
            get_output $ALL
            ;;
        most)
            get_output $MOST
            ;;
        *)
            echo "Unknown part $1, skipping"
        esac
        shift
    done
}

RSYNC_OPTS="--info=progress2 --info=name0"
rsync_output() {
    while [ -n "$1" ]; do
        case "$1" in
        conf|build-logs|task-logs)
            echo "rsync $1"
            rsync -a $RSYNC_OPTS $REMOTE:$REMOTE_PATH/$1 .
            ;;
        downloads)
            echo "rsync $1"
            rsync -a $RSYNC_OPTS --exclude="*.done" --exclude="git2" \
                $REMOTE:$REMOTE_PATH/$1 .
            ;;
        downloads-git2)
            echo "rsync $1"
            mkdir -p downloads/git2
            rsync -a $RSYNC_OPTS \
                $REMOTE:$REMOTE_PATH/downloads/git2 downloads/git2
            ;;
        sstate)
            echo "rsync $1"
            rsync -a $RSYNC_OPTS $REMOTE:$REMOTE_PATH/sstate-cache .
            ;;
        deploy)
            echo "rsync $1"
            rsync -a $RSYNC_OPTS $REMOTE:$REMOTE_PATH/$OE_TMP_DIR/$1 .
            ;;
        all)
            rsync_output $ALL
            ;;
        most)
            rsync_output $MOST
            ;;
        *)
            echo "Unknown part $1, skipping"
        esac
        shift
    done
}

usage() {
    echo "usage:"
    echo "    $0 [-d] remote remote_path action [part part part ...]"
    echo "where:"
    echo "    remote is any ssh remote like ubuntu@192.168.56.2"
    echo "    remote_path is the path to the build dir"
    echo "    -d enables bash debug tracing at host and remote"
    echo "action is:"
    echo "    rsync             rsync files in parts to local machine"
    echo "    get-tar           get tar archives of parts to local machine"
#    echo "    sum               calculate sha256 sum of all files in parts"
#    echo "    cache             update remote cache"
#    echo "    cache-public      update global cache"
#    echo "    cache-local       update local cache"
    echo "part is one of: (sizes for core-image-minimal)"
    echo "    all               default, all the below"
    echo "    most              deploy conf build-logs task-logs"
    echo "    deploy            everything in the deploy dir (400MB)"
    echo "                      (images, packages, license)"
    echo "    conf              the conf dir used for the build (tiny) (1K)"
    echo "    build-logs        buildstats + a bit (small( (0.5MB)"
    echo "    task-logs         work*/**/temp logs (bigger) (10MB)"
    echo "    sstate            the saved state dir (large) (1GB)"
    echo "    downloads         the download dir (large) (1GB)"
    echo "                      does not  include the downloads/git2 dir"
    echo "                      enable BB_GENERATE_MIRROR_TARBALLS if you want"
    echo "                      to have mirrors of git content"
    echo "    downloads-git2    only the download/git2 directory (huge) (5GB)"
    exit 3
}

remote-action() {
    REMOTE_ACTION=$1; shift
    ssh $REMOTE mkdir -p $REMOTE_SCRIPT_PATH
    scp $SCRIPT_PATH $REMOTE:$REMOTE_SCRIPT_PATH/$SCRIPT
    ssh $REMOTE $REMOTE_SCRIPT_PATH/$SCRIPT $REMOTE_DEBUG \
        on-remote $REMOTE_PATH $REMOTE_ACTION "$@"
}

case "$REMOTE" in
"")
    usage
    exit 3
    ;;
on-remote)
    shift; shift; shift || true
    cd $REMOTE_PATH
    case $ACTION in
    prep_rsync|make_tar|get_tmp_dir)
        on_remote_$ACTION "$@"
        ;;
    *)
        echo "Unhandled remote action $ACTION"
        exit 2
        ;;
    esac
    ;;
*)
    shift; shift; shift || true

    # This pattern is common, handle it here
    if [ -z "$1" ]; then
        PARTS=most
    else
        PARTS="$@"
    fi

    case $ACTION in
    get-tar)
        if ! remote-action make_tar "$PARTS"; then
            rc=$?
            echo "remote build of archives failed"
            exit $rc
        fi

        get_output $PARTS
        ;;
    rsync)
        if ! remote-action prep_rsync "$PARTS"; then
            rc=$?
            echo "remote prep of dirs failed"
            exit $rc
        fi
        OE_TMP_DIR=$(remote-action get_tmp_dir)

        rsync_output $PARTS
        ;;
    *)
        echo "unhandled action $ACTION"
        exit 2
        ;;
    esac
esac
